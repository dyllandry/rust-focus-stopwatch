Immediate stuff:
    ✔ change "interval" to "session" @done(22-07-10 11:20)
        While explaining this to Vicky, instead of saying "interval", I was saying "session".
        Maybe that means I should change the words I used in the technical implementation.
        But maybe the words used in the technical implementation don't have to match how I describe it.
        It is technically an "interval", but it is also a session.
        Interval: a time between events.
        Session: a period devoted to a particular activity
        Yeah, I think I want to use words that also have added business meaning. So "session" instead of just "interval".
    ✘ change "focus" to "work" @cancelled(22-07-10 11:33)
        Was going to do this because when describing the idea to Vicky I kept saying I "worked" instead of I "focused".
        But I'd like this to be a "focus stopwatch" not a "work stopwatch".
    ✔ implement basic tui-rs @done(22-07-10 12:15)
    ✔ add an event loop that can be exited to end program @done(22-07-11 20:32)
        Crossterm has an event poll read example https://github.com/crossterm-rs/crossterm/blob/master/examples/event-poll-read.rs
        Could poll for 15 ms.
            If no event, redraw
            if event, process event, redraw
    ✔ draw basic static ui in draw_ui @done(22-07-14 21:19)
    ✔ show incrementing current session time @done(22-07-14 22:31)
    ✔ let user enter rest/focus mode @done(22-07-20 21:09)
    ✔ make session totals "(Active)" label and current session "(Focus/Rest)" labels update @done(22-07-20 21:30)
    ☐ let user pause
    
Long-term:
    - Be able to create your own "modes".
        Like have session types for "development", "PR review", "jira", etc.
        Accept string input from user, use as key in sessions_by_type.
        This will require a UI.
            Could do a TUI with tui-rs https://github.com/fdehau/tui-rs
                Only handles visuals, needs other for input
                    Works well with crossterm out of the box https://github.com/crossterm-rs/crossterm
    - autosaving
        Could turn on autosaving
        Provide a save file location
        Begins automatically saving the current "stopwatch" to that file and ids it with today's date.
            "2022-07-14.stopwatch" and if duplicates "2022-07-14_2.stopwatch"
            Serialized representation of session types & their sessions
            Will have to end last session so its endtime isn't dangling in case file is resumed.
        Optionally load a stopwatch from file at start.
            